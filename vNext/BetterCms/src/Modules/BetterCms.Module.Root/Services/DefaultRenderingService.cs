using System;
using System.Collections.Generic;
using System.Linq;
using BetterCms.Configuration;
using BetterCms.Core.Modules;
using BetterCms.Core.Modules.Registration;
using BetterCms.Module.Root.ViewModels;
using BetterCms.Module.Root.ViewModels.Rendering;

using BetterModules.Core.Exceptions;
using Microsoft.Framework.Logging;
using Microsoft.Framework.OptionsModel;

namespace BetterCms.Module.Root.Services
{
    public class DefaultRenderingService : IRenderingService
    {
        /// <summary>
        /// A current class logger.
        /// </summary>
        private readonly ILogger logger;

        /// <summary>
        /// The modules registration.
        /// </summary>
        private readonly ICmsModulesRegistration modulesRegistration;

        /// <summary>
        /// The CMS configuration.
        /// </summary>
        private readonly CmsConfigurationSection cmsConfiguration;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultRenderingService" /> class.
        /// </summary>
        /// <param name="modulesRegistration">The modules registration.</param>
        /// <param name="cmsConfiguration">The CMS configuration.</param>
        /// <param name="loggerFactory">The logger factory</param>
        public DefaultRenderingService(ICmsModulesRegistration modulesRegistration, IOptions<CmsConfigurationSection> cmsConfiguration, ILoggerFactory loggerFactory)
        {
            this.cmsConfiguration = cmsConfiguration.Value;
            this.modulesRegistration = modulesRegistration;
            logger = loggerFactory.CreateLogger<DefaultRenderingService>();
        }

        /// <summary>
        /// Retrieves a list of registered JavaScript module includes.
        /// </summary>
        /// <returns>Enumerator of JavaScriptModuleViewModel objects.</returns>
        public IEnumerable<JavaScriptModuleInclude> GetJavaScriptIncludes()
        {
            IEnumerable<JavaScriptModuleInclude> model = Enumerable.Empty<JavaScriptModuleInclude>();

            try
            {
                var javaScriptModules = modulesRegistration.GetJavaScriptModules();

                if (javaScriptModules != null)
                {
                    model = javaScriptModules
                        .Select(
                            f => new JavaScriptModuleInclude
                            {
                                Name = f.Name,
                                IsAutoGenerated = f.IsAutoGenerated,
                                Path = f.IsAutoGenerated ? string.Format(RootModuleConstants.AutoGeneratedJsFilePathPattern, f.Name) : f.Path,
                                MinifiedPath = f.MinPath ?? f.Module.MinifiedJsPath,
                                FriendlyName = f.FriendlyName,
                                Links = new UrlProjectionsViewModel
                                {
                                    Projections = f.Links.OrderBy(x => x.Order)
                                },
                                Globalization = new ProjectionsViewModel
                                {
                                    Projections = f.Globalization.OrderBy(x => x.Order)
                                },
                                ShimConfig = f.ShimConfiguration != null ? new JavaScriptModuleShimConfigurationViewModel
                                                 {
                                                     Exports = f.ShimConfiguration.Exports,
                                                     Depends = f.ShimConfiguration.Depends
                                                 } : null
                            });
                }
            }
            catch (CoreException ex)
            {
                logger.LogError("Failed to retrieve java script modules.", ex);
            }

            return model;
        }

        public IEnumerable<string> GetStyleSheetIncludes(bool includePrivateCssFiles, bool includePublicCssFiles, Type moduleDescriptorType = null)
        {
            var allIncludes = new List<CssIncludeDescriptor>();

            if (moduleDescriptorType != null)
            {
                var modules = modulesRegistration.GetCmsModules();
                foreach (var module in modules)
                {
                    if (module.GetType() == moduleDescriptorType)
                    {
                        allIncludes.AddRange(module.RegisterCssIncludes());
                    }
                }
            }
            else
            {
                allIncludes.AddRange(modulesRegistration.GetStyleSheetIncludes());
            }

            var includes = allIncludes
                                .Where(f => f.IsPublic && includePublicCssFiles || !f.IsPublic && includePrivateCssFiles);

            if (cmsConfiguration.UseMinifiedResources)
            {
                return includes.Select(f => string.IsNullOrEmpty(f.MinPath) 
                                                ? f.ContainerModule.MinifiedCssPath
                                                : f.MinPath)
                                .Distinct();
            }

            return includes.Select(f => f.Path).Distinct();
        }
    }
}