using System.Collections.Generic;

using BetterCms.Core.Exceptions;
using BetterCms.Core.Modules.Projections;

namespace BetterCms.Core.Modules
{
    /// <summary>
    /// Describes a JS file include from external sources.
    /// </summary>
    public class ExternalJsIncludeDescriptor
    {
        public ExternalJsIncludeDescriptor(string name, string filePath = null, string minFilePath = null, bool isAutoGenerated = false)
        {
            Links = new List<IActionProjection>();
            Globalization = new List<IActionProjection>();

            Name = name;

            if (string.IsNullOrEmpty(filePath)) throw new CmsException("Js file path can not by empty");

            var fileName = System.IO.Path.GetFileName(filePath);
            FileName = fileName;
            IsAutoGenerated = isAutoGenerated;

            Path = filePath;
            MinPath = minFilePath;
        }

        /// <summary>
        /// Gets the name of the file.
        /// </summary>
        /// <value>
        /// The name of the file.
        /// </value>
        public string FileName { get; private set; }

        /// <summary>
        /// Gets or sets the name of the java script module (like bcms.page).
        /// </summary>
        /// <value>
        /// The name of the java script module.
        /// </value>
        public string Name { get; private set; }

        /// <summary>
        /// Gets the 'friendly' module name to use internally in java script.
        /// </summary>
        /// <value>
        /// The 'friendly' module name to use internally.
        /// </value>
        public string FriendlyName
        {
            get
            {
                return Name.Replace(".", string.Empty);
            }
        }

        /// <summary>
        /// Gets or sets the JS include path (like '/file/bcms-pages/scripts/bcms.page').
        /// </summary>
        /// <value>
        /// The js module path.
        /// </value>
        public string Path { get; private set; }

        /// <summary>
        /// Gets path of the minified JS file if it was provided.
        /// </summary>
        /// <value>
        /// The path of the minified JS file if it was provided.
        /// </value>
        public string MinPath { get; private set; }

        /// <summary>
        /// Gets a value indicating whether this JS include file is auto generated.
        /// </summary>
        /// <value>
        /// <c>true</c> if this JS include file is auto generated; otherwise, <c>false</c>.
        /// </value>
        public bool IsAutoGenerated { get; private set; }

        /// <summary>
        /// Gets or sets the url list.
        /// </summary>
        /// <value>
        /// The urls.
        /// </value>
        public IList<IActionProjection> Links { get; set; }

        /// <summary>
        /// Gets or sets the js globalization.
        /// </summary>
        /// <value>
        /// The js globalization.
        /// </value>
        public IList<IActionProjection> Globalization { get; set; }

        /// <summary>
        /// Returns a <see cref="System.String" /> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String" /> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return Path;
        }
    }
}
