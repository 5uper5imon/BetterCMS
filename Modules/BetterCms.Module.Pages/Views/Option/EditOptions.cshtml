@using BetterCms.Module.Pages.Content.Resources
@using BetterCms.Module.Root;
@using BetterCms.Module.Root.Mvc.Grids;
@using BetterCms.Module.Root.ViewModels.Shared;

@{
    var gridViewModel = new EditableGridViewModel
    {
        ShowSearch = false,
        TopBlockClass = "bcms-top-block-holder",
        AddHiddenFields = true,
        Columns = new List<EditableGridColumn>
            {
                new EditableGridColumn(PagesGlobalization.Options_OptionKeyColumn, null, "key")
                    {
                        HeaderAttributes = "style=\"width: 250px;\"",
                        AutoFocus = true,
                        HiddenFieldName = "Options[{0}].OptionKey"
                    },
                    
                new EditableGridColumn(PagesGlobalization.Options_OptionDefaultValueColumn, null, "defaultValue")
                    {
                        HeaderAttributes = "style=\"width: 250px;\"",
                        HiddenFieldName = "Options[{0}].OptionDefaultValue",
                        CellView = RootModuleConstants.EditableOptionValueCellTemplate
                    },
                
                new EditableGridDropDownColumn(PagesGlobalization.Options_OptionTypeColumn, null, "type")
                    {
                        OptionsBind = "optionTypes",
                        ValueTextBind = "typeName",
                        HiddenFieldName = "Options[{0}].Type"
                    },
            }
    };
}

@Html.Partial(RootModuleConstants.EditableGridTemplate, gridViewModel)


@*
@using BetterCms.Module.Pages.Content.Resources
@using BetterCms.Module.Pages.ViewModels.Option
@using BetterCms.Module.Root.Content.Resources
@using BetterCms.Module.Root.Mvc.Grids.Extensions
@using BetterCms.Module.Root.Mvc.Grids.TableRenderers
@using BetterCms.Module.Root.ViewModels.Option
@using MvcContrib.UI.Grid

@model IOptionsContainer
           
@{
    Action<ColumnBuilder<OptionViewModel>> columns = column =>
    {
        column.EditButtonColumn();

        column.For(model => Html.InlineEditColumnWithNamePattern(m => model.OptionKey, "bcms-option-key", "bcms-old-option-key", "Options[{0}].OptionKey"))
            .Named(PagesGlobalization.Options_OptionKeyColumn)
            .Sortable(false)
            .HeaderAttributes(@style => "width: 200px;")
            .Attributes(@class => "bcms-option-key");

        column.For(model => Html.InlineEditColumnWithNamePattern(m => model.OptionDefaultValue, "bcms-option-value", "bcms-old-option-value", "Options[{0}].OptionDefaultValue"))
            .Named(PagesGlobalization.Options_OptionDefaultValueColumn)
            .Sortable(false)
            .Attributes(@class => "bcms-option-value");
        
        column.InlineEditControlsColumn(RootGlobalization.Button_Ok);
    };
}
<div class="bcms-top-block-holder">
    <div class="bcms-btn-links-main" id="bcms-add-option-button">@PagesGlobalization.Options_AddNew</div>
</div>

@Html.Grid(Model.Options).Columns(columns).Attributes(@class => "bcms-tables", @id => "bcms-options-grid").RenderUsing(new EditableHtmlTableGridRenderer<OptionViewModel>())

<script type="text/html" id="bcms-editable-row-template">
    @Html.Grid(new List<OptionViewModel> {new OptionViewModel()}).Columns(columns).Attributes(@class => "bcms-tables").RenderUsing(new HtmlTableGridSingleRowRenderer<OptionViewModel>())
</script>
*@

