@using BetterCms.Module.MediaManager.Command.History.GetMediaHistory
@using BetterCms.Module.MediaManager.Content.Resources
@using BetterCms.Module.MediaManager.Controllers
@using BetterCms.Module.MediaManager.Models.Enum
@using BetterCms.Module.MediaManager.ViewModels.History
@using BetterCms.Module.Root.Content.Resources
@using BetterCms.Module.Root.Mvc
@using BetterCms.Module.Root.Mvc.Grids.Extensions
@using BetterCms.Module.Root.Mvc.Grids.TableRenderers
@using BetterCms.Module.Root.Mvc.Helpers
@using Microsoft.Web.Mvc
@using MvcContrib.UI.Grid

@model MediaHistoryViewModel

@helper PreviewLink(MediaHistoryItem item)
{
    <div class="bcms-action-usage bcms-js-preview" title="@RootGlobalization.Button_Preview" data-id="@item.Id">@RootGlobalization.Button_Preview</div>
}

@helper DownloadLink(MediaHistoryItem item)
{
    <div class="bcms-action-download bcms-js-download" title="@MediaGlobalization.MediaManager_ButtonDownload" data-id="@item.Id" data-version="@item.Version">@MediaGlobalization.MediaManager_ButtonDownload</div>
}

@helper RestoreLink(MediaHistoryItem item)
{
    if (item.CanCurrentUserRestoreIt)
    {
        <div class="bcms-action-restore bcms-js-restore" title="@RootGlobalization.Button_Restore" data-id="@item.Id" data-version="@item.Version">@RootGlobalization.Button_Restore</div>
    }
    else
    {
        @:&nbsp;
    }
}

@helper DisplayStatus(string statusName, MediaHistoryStatus status)
{
    switch (status)
    {
        case MediaHistoryStatus.Archived:
            @:<div class="bcms-archived-state">@statusName</div>

            break;

        case MediaHistoryStatus.Active:
        @:<div class="bcms-published-state">@statusName</div>


            break;

        default:
        @:statusName
            break;
    }
}

@{
    Action<ColumnBuilder<MediaHistoryItem>> columns = column =>
    {
        column.For(f => PreviewLink(f))
               .Encode(false)
               .Named("&nbsp;")
               .Sortable(false)
               .HeaderAttributes(@style => "width: 40px; padding: 0;", @class => "bcms-tables-nohover");

        column.For(m => m.PublishedOn.ToFormattedDateString())
               .Named(MediaGlobalization.MediaHistory_Column_PublishedOn)
               .SortColumnName("PublishedOn")
               .HeaderAttributes(@style => "width: 130px;");

        column.For(m => m.PublishedByUser)
               .Named(MediaGlobalization.MediaHistory_Column_PublishedByUser)
               .SortColumnName("PublishedByUser");

        column.For(m => m.ArchivedOn.ToFormattedDateString())
               .Named(MediaGlobalization.MediaHistory_Column_ArchivedOn)
               .SortColumnName("ArchivedOn")
               .HeaderAttributes(@style => "width: 130px;");

        column.For(m => m.DisplayedFor.ToFormatedTimeString())
               .Named(MediaGlobalization.MediaHistory_Column_DisplayedFor)
               .SortColumnName("DisplayedFor")
               .HeaderAttributes(@style => "width: 130px;");

        column.For(m => DisplayStatus(m.StatusName, m.Status))
               .Named(MediaGlobalization.MediaHistory_Column_Status)
               .SortColumnName("StatusName")
               .Encode(false)
               .HeaderAttributes(@style => "width: 95px;");

        column.For(f => DownloadLink(f))
               .Encode(false)
               .Named("&nbsp;")
               .Sortable(false)
               .HeaderAttributes(@style => "width:130px;", @class => "bcms-tables-nohover");

        column.For(f => RestoreLink(f))
               .Encode(false)
               .Named("&nbsp;")
               .Sortable(false)
               .HeaderAttributes(@style => "width: 40px; padding: 0;", @class => "bcms-tables-nohover");
    };
}

@Html.MessagesBox()
<div class="bcms-modal-frame-holder">
    <div class="bcms-history-preview-holder bcms-history-preview-holder-media" id="bcms-history-preview">
        <div class="bcms-history-info" style="display: block;">@MediaGlobalization.MediaHistory_SelectVersionToPreviewMessage</div>
        @*<div class="bcms-history-content"></div>*@
    </div>

    <div class="bcms-history-table-holder">
        @using (Html.BeginForm<HistoryController>(f => f.MediaHistory((GetMediaHistoryRequest)null), FormMethod.Post, new { @id = "bcms-pagecontenthistory-form", @class = "bcms-ajax-form" }))
        {
            @Html.HiddenGridOptions(Model.GridOptions)
            @Html.HiddenFor(model => model.MediaId)

            <div class="bcms-history-table-top">
                <div class="bcms-large-titles">@MediaGlobalization.MediaHistory_OlderVersions</div>

                <div class="bcms-btn-search" id="bcms-pagecontenthistory-search-btn">@RootGlobalization.Button_Search</div>
                <div class="bcms-search-block">
                    @Html.TextBoxFor(m => m.SearchQuery, new { @class = "bcms-field-text", @placeholder = RootGlobalization.WaterMark_Search })
                </div>            
            </div>

            <div class="bcms-history-items-list bcms-history-items-list-media">
                @Html.Grid(Model.Items).Sort(Model.GridOptions).Columns(columns).Attributes(@class => "bcms-tables bcms-history-grid").RenderUsing(new EditableHtmlTableGridRenderer<MediaHistoryItem>())
                @Html.HiddenSubmit()
            </div>
        }
    </div>
</div>

<script type="text/html" id="bcms-history-preview-template">
    <iframe src="" style="width: 100%; height: 100%; border: 0px;"></iframe>
</script>
